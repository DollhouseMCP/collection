name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string

permissions:
  contents: write
  packages: write

jobs:
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine version
        id: version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${{ github.ref_name }}"
          fi
          
          # Validate version format
          if ! [[ "$VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "❌ Invalid version format: $VERSION"
            echo "Version must be in format: vX.Y.Z"
            exit 1
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "✅ Version: $VERSION"

      - name: Check CHANGELOG
        run: |
          if ! grep -q "${{ steps.version.outputs.version }}" CHANGELOG.md; then
            echo "⚠️ Warning: Version ${{ steps.version.outputs.version }} not found in CHANGELOG.md"
          fi

  build-release:
    name: Build Release - ${{ matrix.os }}
    needs: validate-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm run test:all

      - name: Build project
        run: npm run build

      - name: Package release
        run: |
          # Create release directory
          mkdir -p release
          
          # Copy distribution files
          cp -r dist release/
          cp package.json release/
          cp package-lock.json release/
          cp README.md release/
          cp LICENSE release/
          cp LICENSE-CONTENT release/
          
          # Create tarball
          tar -czf "dollhousemcp-collection-${{ needs.validate-release.outputs.version }}-${{ matrix.os }}.tar.gz" release/

      - name: Upload release artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-${{ matrix.os }}
          path: "*.tar.gz"
          retention-days: 1

  create-github-release:
    name: Create GitHub Release
    needs: [validate-release, build-release]
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download release artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: release-*
          merge-multiple: true

      - name: Generate release notes
        id: release-notes
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          
          # Extract changelog section for this version
          cat > release-notes.md << EOF
          # DollhouseMCP Collection $VERSION
          
          ## 📦 Installation
          
          \`\`\`bash
          npm install @dollhousemcp/collection@$VERSION
          \`\`\`
          
          ## 🚀 What's New
          
          EOF
          
          # Try to extract from CHANGELOG.md
          if [ -f CHANGELOG.md ]; then
            awk "/## $VERSION/,/## v[0-9]/" CHANGELOG.md | head -n -1 >> release-notes.md || echo "See CHANGELOG.md for details." >> release-notes.md
          else
            echo "See commit history for changes." >> release-notes.md
          fi
          
          cat >> release-notes.md << EOF
          
          ## 📊 Quality Metrics
          
          - ✅ All tests passing on Ubuntu, Windows, and macOS
          - 🔒 Security scan completed
          - 📈 Performance benchmarks available
          
          ## 📥 Downloads
          
          Platform-specific builds are attached below.
          EOF

      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ needs.validate-release.outputs.version }}
          name: ${{ needs.validate-release.outputs.version }}
          bodyFile: release-notes.md
          artifacts: "*.tar.gz"
          draft: true
          prerelease: ${{ contains(needs.validate-release.outputs.version, '-') }}

  publish-npm:
    name: Publish to npm
    needs: [validate-release, create-github-release]
    runs-on: ubuntu-latest
    if: success()
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Update package version
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          npm version ${VERSION#v} --no-git-tag-version

      - name: Publish to npm (dry run)
        run: npm publish --dry-run
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Publish to npm
        if: env.NPM_TOKEN != ''
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}